from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QTabWidget, QTableWidget, QTableWidgetItem,
    QHeaderView, QLineEdit, QComboBox, QDateEdit, QCalendarWidget, QFormLayout, QStackedWidget, QCompleter, QGridLayout, QMessageBox, QFrame, QSpinBox, QTextEdit, QProgressBar, QDialog, QDialogButtonBox, QSizePolicy, QCheckBox
)
from PyQt6.QtCore import Qt, QDate, QSize, pyqtSignal
from PyQt6.QtGui import QIcon, QPixmap
from app.core.db import get_all_guests, get_all_rooms, update_room, get_guest_id_by_name, insert_checkin, get_all_checkins, update_checkin, get_booking_services, get_total_booking_charges, get_room_rates
from app.ui.dialogs.add_extra_charge import AddExtraChargeDialog
import uuid
from datetime import datetime
import os
import sys

class CheckInWidget(QWidget):
    """Widget for managing check-ins"""
    
    # Signal for guest deletion
    guest_deleted = pyqtSignal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.transaction_id = str(uuid.uuid4())[:8]  # Initialize transaction ID
        self.checkin_id = str(uuid.uuid4())[:8]  # Initialize check-in ID
        self.checkin_date = datetime.now().strftime('%Y-%m-%d %H:%M')
        self.selected_room_id = None  # Ensure this is always initialized
        self.current_checkout = None  # Added for checkout functionality
        self.setup_ui()
        
        # Connect to the guest deletion signal from the main window
        if parent and hasattr(parent, 'guest_deleted'):
            parent.guest_deleted.connect(self.refresh_guest_lists)

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # Header
        header_layout = QHBoxLayout()
        title_label = QLabel("Check-ins")
        title_label.setObjectName("pageTitle")
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        # Create tab widget
        self.tab_widget = QTabWidget()
        
        # Check-in list tab
        self.checkin_list_tab = QWidget()
        self.setup_checkin_list_tab()
        checkin_list_icon = QIcon(":/icons/checkins-list.png")
        checkin_list_icon.addPixmap(checkin_list_icon.pixmap(QSize(48, 48)))
        self.tab_widget.addTab(self.checkin_list_tab, checkin_list_icon, "Check-ins")
        
        # New check-in tab
        self.new_checkin_tab = QWidget()
        self.setup_new_checkin_tab()
        new_checkin_icon = QIcon(":/icons/add_checkin.png")
        new_checkin_icon.addPixmap(new_checkin_icon.pixmap(QSize(48, 48)))
        self.tab_widget.addTab(self.new_checkin_tab, new_checkin_icon, "New Check-in")
        
        # Check-out tab
        self.checkout_tab = QWidget()
        self.setup_checkout_tab()
        checkout_icon = QIcon(":/icons/departures.png")
        checkout_icon.addPixmap(checkout_icon.pixmap(QSize(48, 48)))
        self.tab_widget.addTab(self.checkout_tab, checkout_icon, "Check-out")
        
        layout.addWidget(self.tab_widget)

    def setup_checkin_list_tab(self):
        layout = QVBoxLayout(self.checkin_list_tab)
        # Search and filter bar
        filter_frame = QFrame()
        filter_frame.setObjectName("filterFrame")
        filter_layout = QHBoxLayout(filter_frame)
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Search by guest, check-in #, date...")
        filter_layout.addWidget(self.search_input)
        
        self.filter_arrival = QDateEdit()
        self.filter_arrival.setCalendarPopup(True)
        self.filter_arrival.setDisplayFormat("yyyy-MM-dd")
        filter_layout.addWidget(self.filter_arrival)
        
        self.filter_departure = QDateEdit()
        self.filter_departure.setCalendarPopup(True)
        self.filter_departure.setDisplayFormat("yyyy-MM-dd")
        filter_layout.addWidget(self.filter_departure)
        
        self.filter_room_type = QComboBox()
        self.filter_room_type.addItems(["All Room Types", "Single", "Double", "Suite", "Deluxe"])
        filter_layout.addWidget(self.filter_room_type)
        
        refresh_btn = QPushButton("Refresh")
        refresh_btn.setObjectName("actionButton")
        refresh_btn.clicked.connect(self.load_checkin_list)
        filter_layout.addWidget(refresh_btn)
        
        layout.addWidget(filter_frame)
        
        # Check-in table
        self.checkin_table = QTableWidget()
        self.checkin_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.checkin_table.setColumnCount(7)
        self.checkin_table.setHorizontalHeaderLabels([
            "Check-In #", "Guest Name", "Arrival", "Departure", "Room", "Status", "Actions"
        ])
        self.checkin_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.checkin_table.setAlternatingRowColors(True)
        self.checkin_table.verticalHeader().setDefaultSectionSize(50)  # Make rows thick
        layout.addWidget(self.checkin_table)

    def populate_guest_combo(self):
        self.guest_select_combo.clear()
        guests = get_all_guests()
        self.guest_select_combo.addItem("--Select guest--", None)
        for g in guests:
            name = f"{g['first_name']} {g['last_name']}"
            self.guest_select_combo.addItem(name, g)

    def setup_new_checkin_tab(self):
        layout = QVBoxLayout(self.new_checkin_tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)

        # Progress indicator
        progress_frame = QFrame()
        progress_frame.setObjectName("progressFrame")
        progress_layout = QHBoxLayout(progress_frame)
        
        steps = ["Guest Details", "Stay Details", "Room Selection", "Payment", "Confirmation"]
        self.progress_labels = []
        
        for i, step in enumerate(steps):
            step_widget = QWidget()
            step_layout = QVBoxLayout(step_widget)
            
            # Step number circle
            number_label = QLabel(str(i + 1))
            number_label.setObjectName("stepNumber")
            number_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            # Step name
            name_label = QLabel(step)
            name_label.setObjectName("stepName")
            name_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            step_layout.addWidget(number_label)
            step_layout.addWidget(name_label)
            progress_layout.addWidget(step_widget)
            
            self.progress_labels.append((number_label, name_label))
            
            if i < len(steps) - 1:
                line = QFrame()
                line.setFrameShape(QFrame.Shape.HLine)
                line.setObjectName("progressLine")
                progress_layout.addWidget(line)
        
        layout.addWidget(progress_frame)

        # Wizard steps
        self.wizard = QStackedWidget()
        layout.addWidget(self.wizard)

        # Step 1: Guest Selection/Input
        step1 = QWidget()
        s1_layout = QVBoxLayout(step1)
        s1_layout.setContentsMargins(40, 20, 40, 20)
        search_label = QLabel("Select Guest")
        search_label.setObjectName("sectionTitle")
        s1_layout.addWidget(search_label)
        
        # Create a container for the search and dropdown
        search_container = QWidget()
        search_container_layout = QHBoxLayout(search_container)
        search_container_layout.setContentsMargins(0, 0, 0, 0)
        search_container_layout.setSpacing(10)  # Add some spacing between the widgets
        
        # Guest select combo
        self.guest_select_combo = QComboBox()
        self.populate_guest_combo()
        self.guest_select_combo.currentIndexChanged.connect(self.on_guest_selected)
        self.guest_select_combo.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        search_container_layout.addWidget(self.guest_select_combo, 1)  # Stretch factor of 1
        
        # Search input
        self.guest_search = QLineEdit()
        self.guest_search.setPlaceholderText("Search guest...")
        self.guest_search.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        search_container_layout.addWidget(self.guest_search, 1)  # Stretch factor of 1
        
        s1_layout.addWidget(search_container)
        
        # Guest details form (read-only labels)
        self.guest_first_name_label = QLabel()
        self.guest_last_name_label = QLabel()
        self.guest_id_number_label = QLabel()
        self.guest_nationality_label = QLabel()
        s1_layout.addWidget(QLabel("First Name:"))
        s1_layout.addWidget(self.guest_first_name_label)
        s1_layout.addWidget(QLabel("Last Name:"))
        s1_layout.addWidget(self.guest_last_name_label)
        s1_layout.addWidget(QLabel("ID Number:"))
        s1_layout.addWidget(self.guest_id_number_label)
        s1_layout.addWidget(QLabel("Nationality:"))
        s1_layout.addWidget(self.guest_nationality_label)
        
        self.wizard.addWidget(step1)

        # Step 2: Stay Details
        step2 = QWidget()
        s2_layout = QVBoxLayout(step2)
        s2_layout.setContentsMargins(40, 20, 40, 20)
        
        # Date selection with split calendar
        date_frame = QFrame()
        date_frame.setObjectName("dateFrame")
        date_layout = QHBoxLayout(date_frame)
        date_layout.setSpacing(40)
        
        # Arrival date
        arrival_widget = QWidget()
        arrival_layout = QVBoxLayout(arrival_widget)
        arrival_label = QLabel("Arrival Date")
        arrival_label.setObjectName("sectionTitle")
        arrival_layout.addWidget(arrival_label)
        
        self.arrival_date = QCalendarWidget()
        self.arrival_date.setMinimumDate(QDate.currentDate())
        self.arrival_date.setMinimumWidth(350)
        self.arrival_date.setMinimumHeight(300)
        self.arrival_date.clicked.connect(self.update_payment_amount)
        arrival_layout.addWidget(self.arrival_date)
        
        # Departure date
        departure_widget = QWidget()
        departure_layout = QVBoxLayout(departure_widget)
        departure_label = QLabel("Departure Date")
        departure_label.setObjectName("sectionTitle")
        departure_layout.addWidget(departure_label)
        
        self.departure_date = QCalendarWidget()
        self.departure_date.setMinimumDate(QDate.currentDate().addDays(1))
        self.departure_date.setMinimumWidth(350)
        self.departure_date.setMinimumHeight(300)
        self.departure_date.clicked.connect(self.update_payment_amount)
        departure_layout.addWidget(self.departure_date)
        
        date_layout.addWidget(arrival_widget, 1)
        date_layout.addWidget(departure_widget, 1)
        s2_layout.addWidget(date_frame)
        
        # Number of guests with stepper
        guests_frame = QFrame()
        guests_frame.setObjectName("guestsFrame")
        guests_layout = QHBoxLayout(guests_frame)
        
        guests_label = QLabel("Number of Guests")
        guests_label.setObjectName("sectionTitle")
        guests_layout.addWidget(guests_label)
        
        self.num_guests = QSpinBox()
        self.num_guests.setMinimum(1)
        self.num_guests.setMaximum(10)
        self.num_guests.setValue(1)
        self.num_guests.setButtonSymbols(QSpinBox.ButtonSymbols.UpDownArrows)
        self.num_guests.setMinimumWidth(120)
        guests_layout.addWidget(self.num_guests)
        guests_layout.addStretch()
        
        s2_layout.addWidget(guests_frame)
        self.wizard.addWidget(step2)

        # Step 3: Room Selection
        step3 = QWidget()
        s3_layout = QVBoxLayout(step3)
        s3_layout.setContentsMargins(40, 20, 40, 20)
        
        # Room grid with improved styling
        rooms_frame = QFrame()
        rooms_frame.setObjectName("roomsFrame")
        rooms_layout = QVBoxLayout(rooms_frame)
        
        rooms_label = QLabel("Select Room")
        rooms_label.setObjectName("sectionTitle")
        rooms_layout.addWidget(rooms_label)
        
        self.room_grid_widget = QWidget()
        self.room_grid_layout = QGridLayout(self.room_grid_widget)
        self.room_grid_layout.setSpacing(10)
        rooms_layout.addWidget(self.room_grid_widget)
        
        # Legend with improved styling
        legend_frame = QFrame()
        legend_frame.setObjectName("legendFrame")
        legend_layout = QHBoxLayout(legend_frame)
        
        status_colors = {
            "Vacant": "#27ae60",
            "Occupied": "#c0392b",
            "Dirty": "#e67e22",
            "Clean": "#2980b9",
            "Out of Order": "#7f8c8d",
            "Reserved": "#8e44ad"
        }
        
        for status, color in status_colors.items():
            legend_item = QWidget()
            legend_item_layout = QHBoxLayout(legend_item)
            legend_item_layout.setSpacing(5)
            
            color_box = QLabel()
            color_box.setFixedSize(20, 20)
            color_box.setStyleSheet(f"background-color: {color}; border-radius: 4px;")
            
            status_label = QLabel(status)
            status_label.setStyleSheet("color: #2c3e50;")
            
            legend_item_layout.addWidget(color_box)
            legend_item_layout.addWidget(status_label)
            legend_layout.addWidget(legend_item)
        
        rooms_layout.addWidget(legend_frame)
        s3_layout.addWidget(rooms_frame)
        self.wizard.addWidget(step3)

        # Step 4: Payment
        step4 = QWidget()
        s4_layout = QVBoxLayout(step4)
        s4_layout.setContentsMargins(40, 20, 40, 20)
        
        payment_frame = QFrame()
        payment_frame.setObjectName("paymentFrame")
        payment_layout = QVBoxLayout(payment_frame)
        
        payment_label = QLabel("Payment Details")
        payment_label.setObjectName("sectionTitle")
        payment_layout.addWidget(payment_label)
        
        # Payment method with modern dropdown
        method_widget = QWidget()
        method_layout = QHBoxLayout(method_widget)
        method_label = QLabel("Payment Method:")
        self.payment_method = QComboBox()
        self.payment_method.addItems(["Cash", "Credit Card", "Debit Card", "Mobile Payment"])
        method_layout.addWidget(method_label)
        method_layout.addWidget(self.payment_method)
        payment_layout.addWidget(method_widget)
        
        # Amount details
        amounts_widget = QWidget()
        amounts_layout = QFormLayout(amounts_widget)
        amounts_layout.setSpacing(15)
        
        self.payment_amount = QLineEdit()
        self.payment_amount.setReadOnly(True)
        self.payment_amount.setText("0.00")
        self.payment_amount.setObjectName("readOnlyInput")
        
        self.total_paid = QLineEdit()
        self.total_paid.setPlaceholderText("Enter amount paid")
        
        self.amount_due = QLineEdit()
        self.amount_due.setReadOnly(True)
        self.amount_due.setText("0.00")
        self.amount_due.setObjectName("readOnlyInput")
        
        amounts_layout.addRow("Amount Due:", self.payment_amount)
        amounts_layout.addRow("Total Paid:", self.total_paid)
        amounts_layout.addRow("Amount Remaining:", self.amount_due)
        
        payment_layout.addWidget(amounts_widget)
        
        # Payment status with progress indicator
        status_widget = QWidget()
        status_layout = QVBoxLayout(status_widget)
        
        self.payment_status_label = QLabel("Pending")
        self.payment_status_label.setObjectName("paymentStatus")
        status_layout.addWidget(self.payment_status_label)
        
        self.payment_progress = QProgressBar()
        self.payment_progress.setObjectName("paymentProgress")
        self.payment_progress.setRange(0, 100)
        self.payment_progress.setValue(0)
        status_layout.addWidget(self.payment_progress)
        
        payment_layout.addWidget(status_widget)
        
        s4_layout.addWidget(payment_frame)
        self.wizard.addWidget(step4)

        # Step 5: Confirmation
        step5 = QWidget()
        s5_layout = QVBoxLayout(step5)
        s5_layout.setContentsMargins(40, 20, 40, 20)
        
        confirmation_frame = QFrame()
        confirmation_frame.setObjectName("confirmationFrame")
        confirmation_layout = QVBoxLayout(confirmation_frame)
        
        # Success message
        success_label = QLabel("Check-In Confirmed!")
        success_label.setObjectName("successTitle")
        success_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        confirmation_layout.addWidget(success_label)
        
        # Confirmation details
        self.confirmation_label = QLabel()
        self.confirmation_label.setObjectName("confirmationDetails")
        self.confirmation_label.setWordWrap(True)
        confirmation_layout.addWidget(self.confirmation_label)
        
        # Action buttons
        actions_widget = QWidget()
        actions_layout = QHBoxLayout(actions_widget)
        
        self.print_receipt_btn = QPushButton("Print Receipt")
        self.print_receipt_btn.setObjectName("actionButton")
        self.print_receipt_btn.clicked.connect(self.print_receipt)
        
        self.email_receipt_btn = QPushButton("Email Receipt")
        self.email_receipt_btn.setObjectName("actionButton")
        
        actions_layout.addWidget(self.print_receipt_btn)
        actions_layout.addWidget(self.email_receipt_btn)
        
        confirmation_layout.addWidget(actions_widget)
        
        s5_layout.addWidget(confirmation_frame)
        self.wizard.addWidget(step5)

        # Navigation buttons
        nav_frame = QFrame()
        nav_frame.setObjectName("navFrame")
        nav_layout = QHBoxLayout(nav_frame)
        
        self.back_btn = QPushButton("Back")
        self.next_btn = QPushButton("Next")
        self.cancel_btn = QPushButton("Cancel")
        self.finish_btn = QPushButton("Finish")
        
        self.back_btn.setObjectName("navButton")
        self.next_btn.setObjectName("navButton")
        self.cancel_btn.setObjectName("navButton")
        self.finish_btn.setObjectName("navButton")
        
        nav_layout.addWidget(self.cancel_btn)
        nav_layout.addStretch()
        nav_layout.addWidget(self.back_btn)
        nav_layout.addWidget(self.next_btn)
        nav_layout.addWidget(self.finish_btn)
        
        layout.addWidget(nav_frame)

        # Connect signals
        self.back_btn.clicked.connect(self.prev_step)
        self.next_btn.clicked.connect(self.next_step)
        self.cancel_btn.clicked.connect(self.cancel_wizard)
        self.finish_btn.clicked.connect(self.finish_wizard)
        self.total_paid.textChanged.connect(self.update_amount_due)
        self.total_paid.textChanged.connect(self.update_payment_status)
        self.payment_amount.textChanged.connect(self.update_payment_status)
        
        self.update_wizard_ui()

    def setup_checkout_tab(self):
        layout = QVBoxLayout(self.checkout_tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)

        # Progress indicator
        progress_frame = QFrame()
        progress_frame.setObjectName("progressFrame")
        progress_layout = QHBoxLayout(progress_frame)
        
        steps = ["Select Guest", "Review & Charges", "Payment", "Confirmation"]
        self.checkout_progress_labels = []
        
        for i, step in enumerate(steps):
            step_widget = QWidget()
            step_layout = QVBoxLayout(step_widget)
            
            # Step number circle
            number_label = QLabel(str(i + 1))
            number_label.setObjectName("stepNumber")
            number_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            # Step name
            name_label = QLabel(step)
            name_label.setObjectName("stepName")
            name_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            
            step_layout.addWidget(number_label)
            step_layout.addWidget(name_label)
            progress_layout.addWidget(step_widget)
            
            self.checkout_progress_labels.append((number_label, name_label))
            
            if i < len(steps) - 1:
                line = QFrame()
                line.setFrameShape(QFrame.Shape.HLine)
                line.setObjectName("progressLine")
                progress_layout.addWidget(line)
        
        layout.addWidget(progress_frame)

        # Wizard steps
        self.checkout_wizard = QStackedWidget()
        layout.addWidget(self.checkout_wizard)

        # Step 1: Guest Selection
        step1 = QWidget()
        s1_layout = QVBoxLayout(step1)
        s1_layout.setContentsMargins(40, 20, 40, 20)
        
        # Search frame
        search_frame = QFrame()
        search_frame.setObjectName("searchFrame")
        search_layout = QVBoxLayout(search_frame)
        
        search_label = QLabel("Select Guest to Check Out")
        search_label.setObjectName("sectionTitle")
        search_layout.addWidget(search_label)
        
        # Search container
        search_container = QWidget()
        search_container_layout = QHBoxLayout(search_container)
        search_container_layout.setContentsMargins(0, 0, 0, 0)
        
        # Search input
        self.checkout_search = QLineEdit()
        self.checkout_search.setPlaceholderText("Search by room number, guest name, or check-in ID...")
        self.checkout_search.textChanged.connect(self.filter_checkout_guests)
        search_container_layout.addWidget(self.checkout_search)
        
        search_layout.addWidget(search_container)
        s1_layout.addWidget(search_frame)
        
        # Checked-in guests table
        self.checkout_table = QTableWidget()
        self.checkout_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.checkout_table.setColumnCount(6)
        self.checkout_table.setHorizontalHeaderLabels([
            "Check-in ID", "Guest Name", "Room", "Arrival", "Departure", "Actions"
        ])
        self.checkout_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.checkout_table.setObjectName("dataTable")
        self.checkout_table.setAlternatingRowColors(True)
        self.checkout_table.verticalHeader().setDefaultSectionSize(50)  # Make rows thick
        s1_layout.addWidget(self.checkout_table)
        
        self.checkout_wizard.addWidget(step1)

        # Step 2: Review & Charges
        step2 = QWidget()
        s2_layout = QVBoxLayout(step2)
        s2_layout.setContentsMargins(40, 20, 40, 20)
        
        # Stay details frame
        stay_frame = QFrame()
        stay_frame.setObjectName("detailsFrame")
        stay_layout = QVBoxLayout(stay_frame)
        
        stay_label = QLabel("Stay Details")
        stay_label.setObjectName("sectionTitle")
        stay_layout.addWidget(stay_label)
        
        # Stay details form
        stay_form = QFormLayout()
        self.checkout_guest_name = QLabel()
        self.checkout_room = QLabel()
        self.checkout_arrival = QLabel()
        self.checkout_departure = QLabel()
        self.checkout_actual_departure = QDateEdit()
        self.checkout_actual_departure.setCalendarPopup(True)
        self.checkout_actual_departure.setDate(QDate.currentDate())
        
        stay_form.addRow("Guest:", self.checkout_guest_name)
        stay_form.addRow("Room:", self.checkout_room)
        stay_form.addRow("Arrival:", self.checkout_arrival)
        stay_form.addRow("Scheduled Departure:", self.checkout_departure)
        stay_form.addRow("Actual Departure:", self.checkout_actual_departure)
        
        stay_layout.addLayout(stay_form)
        s2_layout.addWidget(stay_frame)
        
        # Additional charges frame
        charges_frame = QFrame()
        charges_frame.setObjectName("chargesFrame")
        charges_layout = QVBoxLayout(charges_frame)
        
        charges_label = QLabel("Additional Charges")
        charges_label.setObjectName("sectionTitle")
        charges_layout.addWidget(charges_label)
        
        # Charges table
        self.charges_table = QTableWidget()
        self.charges_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.charges_table.setAlternatingRowColors(True)
        self.charges_table.setColumnCount(4)
        self.charges_table.setHorizontalHeaderLabels([
            "Service", "Quantity", "Unit Price", "Total"
        ])
        self.charges_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.charges_table.setObjectName("dataTable")
        charges_layout.addWidget(self.charges_table)
        
        s2_layout.addWidget(charges_frame)
        self.checkout_wizard.addWidget(step2)

        # Step 3: Payment
        step3 = QWidget()
        s3_layout = QVBoxLayout(step3)
        s3_layout.setContentsMargins(40, 20, 40, 20)
        
        payment_frame = QFrame()
        payment_frame.setObjectName("paymentFrame")
        payment_layout = QVBoxLayout(payment_frame)
        
        payment_label = QLabel("Final Payment")
        payment_label.setObjectName("sectionTitle")
        payment_layout.addWidget(payment_label)
        
        # Payment details
        payment_form = QFormLayout()
        
        self.checkout_room_charges = QLineEdit()
        self.checkout_room_charges.setReadOnly(True)
        self.checkout_room_charges.setObjectName("readOnlyInput")
        
        self.checkout_additional_charges = QLineEdit()
        self.checkout_additional_charges.setReadOnly(True)
        self.checkout_additional_charges.setObjectName("readOnlyInput")
        
        # Add tax checkbox and amount
        tax_widget = QWidget()
        tax_layout = QHBoxLayout(tax_widget)
        tax_layout.setContentsMargins(0, 0, 0, 0)
        
        self.checkout_apply_tax = QCheckBox("Apply Tax")
        self.checkout_apply_tax.setChecked(True)  # Default to checked
        self.checkout_apply_tax.stateChanged.connect(self.update_checkout_total)
        
        self.checkout_tax_amount = QLineEdit()
        self.checkout_tax_amount.setReadOnly(True)
        self.checkout_tax_amount.setObjectName("readOnlyInput")
        self.checkout_tax_amount.setText("0.00")
        
        tax_layout.addWidget(self.checkout_apply_tax)
        tax_layout.addWidget(self.checkout_tax_amount)
        
        self.checkout_total_amount = QLineEdit()
        self.checkout_total_amount.setReadOnly(True)
        self.checkout_total_amount.setObjectName("readOnlyInput")
        
        self.checkout_amount_paid = QLineEdit()
        self.checkout_amount_paid.setPlaceholderText("Enter amount paid")
        self.checkout_amount_paid.setObjectName("amountInput")
        
        self.checkout_amount_due = QLineEdit()
        self.checkout_amount_due.setReadOnly(True)
        self.checkout_amount_due.setObjectName("readOnlyInput")
        
        payment_form.addRow("Room Charges:", self.checkout_room_charges)
        payment_form.addRow("Additional Charges:", self.checkout_additional_charges)
        payment_form.addRow("Tax:", tax_widget)
        payment_form.addRow("Total Amount:", self.checkout_total_amount)
        payment_form.addRow("Amount Paid:", self.checkout_amount_paid)
        payment_form.addRow("Amount Due:", self.checkout_amount_due)
        
        payment_layout.addLayout(payment_form)
        
        # Payment method
        method_widget = QWidget()
        method_layout = QHBoxLayout(method_widget)
        method_label = QLabel("Payment Method:")
        self.checkout_payment_method = QComboBox()
        self.checkout_payment_method.addItems(["Cash", "Credit Card", "Debit Card", "Mobile Payment"])
        method_layout.addWidget(method_label)
        method_layout.addWidget(self.checkout_payment_method)
        payment_layout.addWidget(method_widget)
        
        s3_layout.addWidget(payment_frame)
        self.checkout_wizard.addWidget(step3)

        # Step 4: Confirmation
        step4 = QWidget()
        s4_layout = QVBoxLayout(step4)
        s4_layout.setContentsMargins(40, 20, 40, 20)
        
        confirmation_frame = QFrame()
        confirmation_frame.setObjectName("confirmationFrame")
        confirmation_layout = QVBoxLayout(confirmation_frame)
        
        # Success message
        success_label = QLabel("Check-out Confirmed!")
        success_label.setObjectName("successTitle")
        success_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        confirmation_layout.addWidget(success_label)
        
        # Confirmation details
        self.checkout_confirmation_label = QLabel()
        self.checkout_confirmation_label.setObjectName("confirmationDetails")
        self.checkout_confirmation_label.setWordWrap(True)
        confirmation_layout.addWidget(self.checkout_confirmation_label)
        
        # Action buttons
        actions_widget = QWidget()
        actions_layout = QHBoxLayout(actions_widget)
        
        self.checkout_print_receipt_btn = QPushButton("Print Receipt")
        self.checkout_print_receipt_btn.setObjectName("actionButton")
        self.checkout_print_receipt_btn.clicked.connect(self.print_checkout_receipt)
        
        actions_layout.addWidget(self.checkout_print_receipt_btn)
        
        confirmation_layout.addWidget(actions_widget)
        
        s4_layout.addWidget(confirmation_frame)
        self.checkout_wizard.addWidget(step4)

        # Navigation buttons
        nav_frame = QFrame()
        nav_frame.setObjectName("navFrame")
        nav_layout = QHBoxLayout(nav_frame)
        
        self.checkout_back_btn = QPushButton("Back")
        self.checkout_next_btn = QPushButton("Next")
        self.checkout_cancel_btn = QPushButton("Cancel")
        self.checkout_finish_btn = QPushButton("Finish")
        
        self.checkout_back_btn.setObjectName("navButton")
        self.checkout_next_btn.setObjectName("navButton")
        self.checkout_cancel_btn.setObjectName("navButton")
        self.checkout_finish_btn.setObjectName("navButton")
        
        nav_layout.addWidget(self.checkout_cancel_btn)
        nav_layout.addStretch()
        nav_layout.addWidget(self.checkout_back_btn)
        nav_layout.addWidget(self.checkout_next_btn)
        nav_layout.addWidget(self.checkout_finish_btn)
        
        layout.addWidget(nav_frame)

        # Connect signals
        self.checkout_back_btn.clicked.connect(self.checkout_prev_step)
        self.checkout_next_btn.clicked.connect(self.checkout_next_step)
        self.checkout_cancel_btn.clicked.connect(self.checkout_cancel_wizard)
        self.checkout_finish_btn.clicked.connect(self.checkout_finish_wizard)
        self.checkout_amount_paid.textChanged.connect(self.update_checkout_amount_due)
        
        self.load_checked_in_guests()

    def load_checked_in_guests(self):
        """Load currently checked-in guests"""
        self.checkout_table.setRowCount(0)
        checkins = get_all_checkins()
        
        for checkin in checkins:
            if checkin['payment_status'] != 'Checked Out':
                row = self.checkout_table.rowCount()
                self.checkout_table.insertRow(row)
                
                self.checkout_table.setItem(row, 0, QTableWidgetItem(checkin['checkin_id']))
                self.checkout_table.setItem(row, 1, QTableWidgetItem(f"{checkin['first_name']} {checkin['last_name']}"))
                self.checkout_table.setItem(row, 2, QTableWidgetItem(f"{checkin['room_type']} #{checkin['room_number']}"))
                self.checkout_table.setItem(row, 3, QTableWidgetItem(checkin['arrival_date']))
                self.checkout_table.setItem(row, 4, QTableWidgetItem(checkin['departure_date']))
                
                # Add action button
                actions_widget = QWidget()
                actions_layout = QHBoxLayout(actions_widget)
                actions_layout.setContentsMargins(0, 0, 0, 0)
                actions_layout.setSpacing(5)
                actions_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)  # Center the buttons
                
                checkout_btn = QPushButton("Check Out")
                checkout_btn.setObjectName("tableActionButton")
                checkout_btn.setProperty("action", "checkout")
                checkout_btn.setFixedWidth(100)
                checkout_btn.clicked.connect(lambda _, c=checkin: self.start_checkout(c))
                
                actions_layout.addWidget(checkout_btn)
                self.checkout_table.setCellWidget(row, 5, actions_widget)

    def filter_checkout_guests(self):
        """Filter checked-in guests based on search text"""
        search_text = self.checkout_search.text().lower()
        for row in range(self.checkout_table.rowCount()):
            show_row = False
            for col in range(self.checkout_table.columnCount() - 1):  # Exclude actions column
                item = self.checkout_table.item(row, col)
                if item and search_text in item.text().lower():
                    show_row = True
                    break
            self.checkout_table.setRowHidden(row, not show_row)

    def start_checkout(self, checkin):
        """Start checkout process for selected guest"""
        self.current_checkout = checkin
        self.checkout_guest_name.setText(f"{checkin['first_name']} {checkin['last_name']}")
        self.checkout_room.setText(f"{checkin['room_type']} #{checkin['room_number']}")
        self.checkout_arrival.setText(checkin['arrival_date'])
        self.checkout_departure.setText(checkin['departure_date'])
        self.checkout_actual_departure.setDate(QDate.currentDate())
        
        # Calculate room charges
        arrival = QDate.fromString(checkin['arrival_date'], 'yyyy-MM-dd')
        departure = QDate.fromString(checkin['departure_date'], 'yyyy-MM-dd')
        days = arrival.daysTo(departure)
        room_rate = 100  # This should come from your room data
        room_charges = days * room_rate
        self.checkout_room_charges.setText(f"MAD {room_charges:.2f}")
        
        # Load extra charges
        self.charges_table.setRowCount(0)
        extra_charges = get_booking_services(checkin['id'])
        total_extra_charges = 0
        for charge in extra_charges:
            row = self.charges_table.rowCount()
            self.charges_table.insertRow(row)
            self.charges_table.setItem(row, 0, QTableWidgetItem(charge['service_name']))
            self.charges_table.setItem(row, 1, QTableWidgetItem(str(charge['quantity'])))
            self.charges_table.setItem(row, 2, QTableWidgetItem(f"MAD {charge['unit_price_at_time_of_charge']:.2f}"))
            self.charges_table.setItem(row, 3, QTableWidgetItem(f"MAD {charge['total_charge']:.2f}"))
            total_extra_charges += charge['total_charge']
        
        self.checkout_additional_charges.setText(f"MAD {total_extra_charges:.2f}")
        self.update_checkout_total()
        
        # Move to step 2
        self.checkout_wizard.setCurrentIndex(1)
        self.update_checkout_wizard_ui()

    def update_checkout_total(self):
        """Update the total amount including tax"""
        try:
            # Get base amounts
            room_charges = float(self.checkout_room_charges.text().replace('MAD ', ''))
            additional_charges = float(self.checkout_additional_charges.text().replace('MAD ', ''))
            
            # Calculate subtotal
            subtotal = room_charges + additional_charges
            
            # Calculate tax if checkbox is checked
            tax_rate = 0.10  # 10% tax rate
            tax_amount = subtotal * tax_rate if self.checkout_apply_tax.isChecked() else 0
            self.checkout_tax_amount.setText(f"{tax_amount:.2f}")
            
            # Calculate total
            total = subtotal + tax_amount
            self.checkout_total_amount.setText(f"MAD {total:.2f}")
            
            # Update amount due
            self.update_checkout_amount_due()
            
        except ValueError:
            self.checkout_total_amount.setText("0.00")
            self.checkout_tax_amount.setText("0.00")

    def update_checkout_amount_due(self):
        """Update amount due based on total and amount paid"""
        try:
            total = float(self.checkout_total_amount.text().replace('MAD ', ''))
            paid = float(self.checkout_amount_paid.text() or 0)
            due = max(total - paid, 0)
            self.checkout_amount_due.setText(f"MAD {due:.2f}")
        except Exception:
            self.checkout_amount_due.setText(self.checkout_total_amount.text())

    def checkout_prev_step(self):
        """Go to previous step in checkout wizard"""
        if self.checkout_wizard.currentIndex() > 0:
            self.checkout_wizard.setCurrentIndex(self.checkout_wizard.currentIndex() - 1)
            self.update_checkout_wizard_ui()

    def checkout_next_step(self):
        """Go to next step in checkout wizard"""
        if self.checkout_wizard.currentIndex() < self.checkout_wizard.count() - 1:
            self.checkout_wizard.setCurrentIndex(self.checkout_wizard.currentIndex() + 1)
            if self.checkout_wizard.currentIndex() == 3:  # Confirmation step
                self.show_checkout_confirmation()
            self.update_checkout_wizard_ui()

    def checkout_cancel_wizard(self):
        """Cancel checkout process"""
        self.checkout_wizard.setCurrentIndex(0)
        self.update_checkout_wizard_ui()

    def checkout_finish_wizard(self):
        """Complete checkout process"""
        if not self.current_checkout:
            return
            
        # Update room status
        rooms = get_all_rooms()
        room_info = next((r for r in rooms if r['id'] == self.current_checkout['room_id']), None)
        if room_info:
            room_info = dict(room_info)
            room_info['status'] = 'Needs Cleaning'
            update_room(self.current_checkout['room_id'], room_info)
        
        # Update check-in status
        self.current_checkout['payment_status'] = 'Checked Out'
        self.current_checkout['actual_departure'] = self.checkout_actual_departure.date().toString('yyyy-MM-dd')
        self.current_checkout['total_charges'] = float(self.checkout_total_amount.text().replace('MAD ', ''))
        self.current_checkout['final_payment'] = float(self.checkout_amount_paid.text() or 0)
        self.current_checkout['payment_method'] = self.checkout_payment_method.currentText()
        
        update_checkin(self.current_checkout['checkin_id'], self.current_checkout)
        
        # Generate receipt - no need to call here as it will be called when printing
        
        # Reset and return to first step
        self.checkout_wizard.setCurrentIndex(0)
        self.update_checkout_wizard_ui()
        self.load_checked_in_guests()

    def show_checkout_confirmation(self):
        """Show checkout confirmation details"""
        message = f"""
        <div style='font-size:15px;'>
        <b style='font-size:18px;color:#27ae60;'>Check-out Summary</b><br><br>
        <b>Guest:</b> {self.checkout_guest_name.text()}<br>
        <b>Room:</b> {self.checkout_room.text()}<br>
        <b>Arrival:</b> {self.checkout_arrival.text()}<br>
        <b>Departure:</b> {self.checkout_actual_departure.date().toString('yyyy-MM-dd')}<br><br>
        <b>Charges:</b><br>
        &nbsp;&nbsp;Room Charges: {self.checkout_room_charges.text()}<br>
        &nbsp;&nbsp;Additional Charges: {self.checkout_additional_charges.text()}<br>
        &nbsp;&nbsp;Total Amount: {self.checkout_total_amount.text()}<br>
        &nbsp;&nbsp;Amount Paid: MAD {float(self.checkout_amount_paid.text() or 0):.2f}<br>
        &nbsp;&nbsp;Amount Due: {self.checkout_amount_due.text()}<br>
        &nbsp;&nbsp;Payment Method: {self.checkout_payment_method.currentText()}<br>
        </div>
        """
        self.checkout_confirmation_label.setText(message)

    def generate_checkout_receipt(self):
        """Generate checkout receipt based on the HTML template"""
        # Create a directory for receipts if it doesn't exist
        receipts_dir = os.path.join(os.getcwd(), "receipts")
        os.makedirs(receipts_dir, exist_ok=True)
        
        # Create a unique filename for this receipt
        receipt_filename = f"checkout_receipt_{self.current_checkout['checkin_id']}.html"
        receipt_path = os.path.join(receipts_dir, receipt_filename)
        
        # Calculate nights based on arrival and departure dates
        try:
            arrival_date = datetime.strptime(self.checkout_arrival.text(), '%Y-%m-%d')
            departure_date = datetime.strptime(self.checkout_actual_departure.date().toString('yyyy-MM-dd'), '%Y-%m-%d')
            nights = (departure_date - arrival_date).days
        except:
            nights = 3  # Default to 3 if calculation fails
        
        # Extract room rate from charges
        try:
            room_rate = float(self.checkout_room_charges.text().replace('MAD ', '')) / nights
        except:
            room_rate = 150.0  # Default if calculation fails
            
        # Calculate additional charges
        try:
            additional_charges = float(self.checkout_additional_charges.text().replace('MAD ', ''))
        except:
            additional_charges = 0.0
            
        # Get current date
        current_date = datetime.now().strftime('%B %d, %Y')
        
        # Prepare data for the template
        guest_name = self.checkout_guest_name.text()
        room_info = self.checkout_room.text()
        arrival_date = self.checkout_arrival.text()
        departure_date = self.checkout_actual_departure.date().toString('yyyy-MM-dd')
        
        # Calculate costs
        room_total = nights * room_rate
        breakfast_price = 20.0
        breakfast_total = nights * breakfast_price
        
        # Additional services (examples)
        spa_price = 120.0
        minibar_price = 35.0
        laundry_price = 15.0
        laundry_qty = 2
        
        # Calculate totals
        subtotal = room_total + breakfast_total + spa_price + minibar_price + (laundry_price * laundry_qty)
        tax_rate = 0.10  # 10%
        tax_amount = subtotal * tax_rate
        total = subtotal + tax_amount
        
        # Format currency values
        def format_currency(value):
            return f"${value:.2f}"
        
        # Create the HTML content with the template
        html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hotel Checkout Invoice</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 2rem 1rem;
            margin: 0;
        }}
        .invoice-container {{
            max-width: 210mm;
            width: 100%;
            background-color: #ffffff;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 0.75rem;
            padding: 2rem;
            box-sizing: border-box;
        }}
        .flex {{
            display: flex;
        }}
        .flex-col {{
            flex-direction: column;
        }}
        .justify-between {{
            justify-content: space-between;
        }}
        .items-start {{
            align-items: flex-start;
        }}
        .items-center {{
            align-items: center;
        }}
        .pb-6 {{
            padding-bottom: 1.5rem;
        }}
        .mb-6 {{
            margin-bottom: 1.5rem;
        }}
        .mb-4 {{
            margin-bottom: 1rem;
        }}
        .mb-3 {{
            margin-bottom: 0.75rem;
        }}
        .mb-2 {{
            margin-bottom: 0.5rem;
        }}
        .mb-1 {{
            margin-bottom: 0.25rem;
        }}
        .mt-6 {{
            margin-top: 1.5rem;
        }}
        .mt-8 {{
            margin-top: 2rem;
        }}
        .pt-6 {{
            padding-top: 1.5rem;
        }}
        .py-2 {{
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
        }}
        .py-3 {{
            padding-top: 0.75rem;
            padding-bottom: 0.75rem;
        }}
        .border-b {{
            border-bottom-width: 1px;
            border-bottom-style: solid;
        }}
        .border-t {{
            border-top-width: 1px;
            border-top-style: solid;
        }}
        .border-gray-200 {{
            border-color: #e5e7eb;
        }}
        .text-3xl {{
            font-size: 1.875rem;
            line-height: 2.25rem;
        }}
        .text-lg {{
            font-size: 1.125rem;
            line-height: 1.75rem;
        }}
        .text-base {{
            font-size: 1rem;
            line-height: 1.5rem;
        }}
        .text-sm {{
            font-size: 0.875rem;
            line-height: 1.25rem;
        }}
        .text-xl {{
            font-size: 1.25rem;
            line-height: 1.75rem;
        }}
        .font-bold {{
            font-weight: 700;
        }}
        .font-semibold {{
            font-weight: 600;
        }}
        .font-medium {{
            font-weight: 500;
        }}
        .text-gray-800 {{
            color: #1f2937;
        }}
        .text-gray-700 {{
            color: #374151;
        }}
        .text-gray-600 {{
            color: #4b5563;
        }}
        .text-indigo-600 {{
            color: #4f46e5;
        }}
        .text-center {{
            text-align: center;
        }}
        .rounded-full {{
            border-radius: 9999px;
        }}
        .rounded-lg {{
            border-radius: 0.5rem;
        }}
        .overflow-x-auto {{
            overflow-x: auto;
        }}
        .w-full {{
            width: 100%;
        }}
        .h-24 {{
            height: 6rem;
        }}
        .w-24 {{
            width: 6rem;
        }}
        .object-cover {{
            object-fit: cover;
        }}
        .grid {{
            display: grid;
        }}
        .grid-cols-1 {{
            grid-template-columns: repeat(1, minmax(0, 1fr));
        }}
        .grid-cols-2 {{
            grid-template-columns: repeat(2, minmax(0, 1fr));
        }}
        .gap-6 {{
            gap: 1.5rem;
        }}
        .flex-shrink-0 {{
            flex-shrink: 0;
        }}
        .flex-row {{
            flex-direction: row;
        }}
        .justify-end {{
            justify-content: flex-end;
        }}
        
        /* Table styling */
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 1.5rem;
            margin-bottom: 1.5rem;
        }}
        th, td {{
            padding: 0.75rem 1rem;
            text-align: left;
            border-bottom: 1px solid #e5e7eb;
        }}
        th {{
            background-color: #f9fafb;
            font-weight: 600;
            color: #374151;
        }}
        tr:last-child td {{
            border-bottom: none;
        }}
        
        /* Media queries for responsiveness */
        @media (min-width: 640px) {{
            .sm\:flex-row {{
                flex-direction: row;
            }}
            .sm\:items-center {{
                align-items: center;
            }}
            .sm\:mb-0 {{
                margin-bottom: 0;
            }}
            .sm\:w-1\/2 {{
                width: 50%;
            }}
        }}
        @media (min-width: 768px) {{
            .md\:grid-cols-2 {{
                grid-template-columns: repeat(2, minmax(0, 1fr));
            }}
            .md\:w-1\/3 {{
                width: 33.333333%;
            }}
        }}
    </style>
</head>
<body>
    <div class="invoice-container">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center pb-6 border-b border-gray-200 mb-6">
            <div class="mb-4 sm:mb-0">
                <h1 class="text-3xl font-bold text-gray-800 mb-1">Grand Oasis Hotel</h1>
                <p class="text-sm text-gray-600">123 Palm Avenue, Marrakesh, Morocco</p>
                <p class="text-sm text-gray-600">Phone: +212 524 42 00 00 | Email: info@grandoasis.com</p>
            </div>
            <div class="flex-shrink-0">
                <!-- You can replace this with an actual logo -->
                <div style="height: 6rem; width: 6rem; background-color: #A78BFA; color: white; display: flex; align-items: center; justify-content: center; border-radius: 9999px; font-weight: bold;">LOGO</div>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
                <h2 class="text-lg font-semibold text-gray-700 mb-2">Invoice Details:</h2>
                <p class="text-sm text-gray-600"><span class="font-medium">Invoice No:</span> {self.current_checkout['checkin_id']}</p>
                <p class="text-sm text-gray-600"><span class="font-medium">Invoice Date:</span> {current_date}</p>
                <p class="text-sm text-gray-600"><span class="font-medium">Check-out Date:</span> {departure_date}</p>
            </div>
            <div>
                <h2 class="text-lg font-semibold text-gray-700 mb-2">Billed To:</h2>
                <p class="text-sm text-gray-600"><span class="font-medium">Client Name:</span> {guest_name}</p>
                <p class="text-sm text-gray-600"><span class="font-medium">Address:</span> {self.current_checkout.get('address', '456 Desert Street, London, UK')}</p>
                <p class="text-sm text-gray-600"><span class="font-medium">Check-in Date:</span> {arrival_date}</p>
            </div>
        </div>

        <h2 class="text-lg font-semibold text-gray-700 mb-3">Room Charges (Nights)</h2>
        <div class="overflow-x-auto rounded-lg border border-gray-200">
            <table>
                <thead>
                    <tr>
                        <th>Room Type</th>
                        <th>Nights</th>
                        <th>Price/Night</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>{room_info}</td>
                        <td>{nights}</td>
                        <td>{format_currency(room_rate)}</td>
                        <td>{format_currency(room_total)}</td>
                    </tr>
                    <tr>
                        <td>Breakfast (per person)</td>
                        <td>{nights}</td>
                        <td>{format_currency(breakfast_price)}</td>
                        <td>{format_currency(breakfast_total)}</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <h2 class="text-lg font-semibold text-gray-700 mb-3">Additional Services</h2>
        <div class="overflow-x-auto rounded-lg border border-gray-200">
            <table>
                <thead>
                    <tr>
                        <th>Service</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Spa Treatment</td>
                        <td>1</td>
                        <td>{format_currency(spa_price)}</td>
                        <td>{format_currency(spa_price)}</td>
                    </tr>
                    <tr>
                        <td>Minibar Consumption</td>
                        <td>1</td>
                        <td>{format_currency(minibar_price)}</td>
                        <td>{format_currency(minibar_price)}</td>
                    </tr>
                    <tr>
                        <td>Laundry Service</td>
                        <td>{laundry_qty}</td>
                        <td>{format_currency(laundry_price)}</td>
                        <td>{format_currency(laundry_price * laundry_qty)}</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="flex justify-end mt-6">
            <div class="w-full sm:w-1/2 md:w-1/3">
                <div class="flex justify-between items-center py-2 border-b border-gray-200">
                    <span class="text-gray-700 font-medium">Subtotal:</span>
                    <span class="text-gray-800 font-semibold">{format_currency(subtotal)}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-gray-200">
                    <span class="text-gray-700 font-medium">Tax (10%):</span>
                    <span class="text-gray-800 font-semibold">{format_currency(tax_amount)}</span>
                </div>
                <div class="flex justify-between items-center py-3">
                    <span class="text-xl font-bold text-gray-800">Total Due:</span>
                    <span class="text-xl font-bold text-indigo-600">{format_currency(total)}</span>
                </div>
            </div>
        </div>

        <div class="mt-8 pt-6 border-t border-gray-200 text-center">
            <p class="text-sm text-gray-600 mb-2">Payment is due upon receipt. We accept cash, credit card, and bank transfers.</p>
            <p class="text-sm text-gray-600">Thank you for choosing Grand Oasis Hotel. We hope to see you again soon!</p>
        </div>
    </div>
</body>
</html>
"""
        
        # Write HTML to file
        with open(receipt_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        return receipt_path

    def print_checkout_receipt(self):
        """Print checkout receipt"""
        try:
            # Generate receipt - no need to call here as it will be called when printing
            pdf_path = self.generate_checkout_receipt()
            
            # Check if file exists before opening
            if os.path.exists(pdf_path):
                os.startfile(pdf_path)
            else:
                QMessageBox.warning(self, "File Not Found", f"Could not find receipt file at {pdf_path}")
        except Exception as e:
            QMessageBox.warning(self, "Error", f"Failed to open receipt: {str(e)}")
            print(f"Error opening receipt: {str(e)}")

    def update_checkout_wizard_ui(self):
        """Update checkout wizard UI based on current step"""
        current_step = self.checkout_wizard.currentIndex()
        
        # Update progress indicators
        for i, (number_label, name_label) in enumerate(self.checkout_progress_labels):
            if i < current_step:  # Completed steps
                number_label.setProperty("active", "true")
                number_label.setProperty("completed", "true")
                name_label.setProperty("active", "true")
                name_label.setProperty("completed", "true")
            elif i == current_step:  # Current step
                number_label.setProperty("active", "true")
                number_label.setProperty("completed", "false")
                name_label.setProperty("active", "true")
                name_label.setProperty("completed", "false")
            else:  # Future steps
                number_label.setProperty("active", "false")
                number_label.setProperty("completed", "false")
                name_label.setProperty("active", "false")
                name_label.setProperty("completed", "false")
            
            # Force style update
            number_label.style().unpolish(number_label)
            number_label.style().polish(number_label)
            name_label.style().unpolish(name_label)
            name_label.style().polish(name_label)
        
        # Update navigation buttons
        self.checkout_back_btn.setVisible(current_step > 0)
        self.checkout_next_btn.setVisible(current_step < self.checkout_wizard.count() - 1)
        self.checkout_finish_btn.setVisible(current_step == self.checkout_wizard.count() - 1)
        
        # Update button states
        if current_step == 2:  # Payment step
            try:
                amount_due = float(self.checkout_amount_due.text().replace('MAD ', ''))
                self.checkout_finish_btn.setEnabled(amount_due == 0)
            except:
                self.checkout_finish_btn.setEnabled(False)
        else:
            self.checkout_finish_btn.setEnabled(True)

    def update_wizard_ui(self):
        step = self.wizard.currentIndex()
        steps = [
            "Guest Details", "Stay Details", "Room Selection", "Payment", "Confirmation"
        ]
        
        # Reset all steps to default style
        for i, (number_label, name_label) in enumerate(self.progress_labels):
            if i < step:  # Completed steps
                number_label.setProperty("active", "true")
                number_label.setProperty("completed", "true")
                name_label.setProperty("active", "true")
                name_label.setProperty("completed", "true")
            elif i == step:  # Current step
                number_label.setProperty("active", "true")
                number_label.setProperty("completed", "false")
                name_label.setProperty("active", "true")
                name_label.setProperty("completed", "false")
            else:  # Future steps
                number_label.setProperty("active", "false")
                number_label.setProperty("completed", "false")
                name_label.setProperty("active", "false")
                name_label.setProperty("completed", "false")
            
            # Force style update
            number_label.style().unpolish(number_label)
            number_label.style().polish(number_label)
            name_label.style().unpolish(name_label)
            name_label.style().polish(name_label)
        
        self.back_btn.setEnabled(step > 0)
        self.next_btn.setVisible(step < 4)
        self.finish_btn.setVisible(step == 4)

    def next_step(self):
        # Require guest selection/input in step 1
        if self.wizard.currentIndex() == 0:
            if not self.guest_select_combo.currentData():  # Check if a guest is selected from combo
                QMessageBox.warning(self, "Guest Required", "Please select a guest from the dropdown before proceeding.")
                return
        if self.wizard.currentIndex() < self.wizard.count() - 1:
            self.wizard.setCurrentIndex(self.wizard.currentIndex() + 1)
            if self.wizard.currentIndex() == 0:
                self.reload_guests_for_search()
            if self.wizard.currentIndex() == 2:  # Step 3: Room Selection
                self.load_room_grid()
            if self.wizard.currentIndex() == 3:  # Step 4: Payment
                self.update_payment_amount()
            if self.wizard.currentIndex() == 4:  # Step 5: Confirmation
                self.show_confirmation_details()
            self.update_wizard_ui()

    def show_confirmation_details(self):
        # Generate check-in and transaction IDs if not already generated
        if not hasattr(self, 'checkin_id'):
            self.checkin_id = str(uuid.uuid4())[:8]
            self.transaction_id = str(uuid.uuid4())[:8]
            self.checkin_date = datetime.now().strftime('%Y-%m-%d %H:%M')
        
        # Prepare summary
        guest_name = f"{self.guest_first_name_label.text()} {self.guest_last_name_label.text()}"
        guest = self.guest_select_combo.currentData()
        guest_email = guest.get('email', '') if guest else ''
        guest_phone = guest.get('phone', '') if guest else ''
        arrival = self.arrival_date.selectedDate().toString('yyyy-MM-dd')
        departure = self.departure_date.selectedDate().toString('yyyy-MM-dd')
        num_guests = self.num_guests.text()
        room = self.selected_room_id
        rooms = get_all_rooms()
        room_info = next((r for r in rooms if r['id'] == room), {})
        room_number = room_info.get('number', '')
        room_type = room_info.get('type', '')
        total_paid = self.total_paid.text()
        amount_due = self.amount_due.text()
        payment_method = self.payment_method.currentText()
        payment_status = self.payment_status_label.text()
        
        # Detailed confirmation message
        message = f"""
        <div style='font-size:15px;'>
        <b style='font-size:18px;color:#27ae60;'>Check-In Confirmed!</b><br><br>
        <b>Check-In Number:</b> {self.checkin_id}<br>
        <b>Date of Check-In:</b> {self.checkin_date}<br>
        <b>Transaction ID:</b> {self.transaction_id}<br><br>
        <b>Guest Details:</b><br>
        &nbsp;&nbsp;Name: {guest_name}<br>
        &nbsp;&nbsp;Email: {guest_email}<br>
        &nbsp;&nbsp;Phone: {guest_phone}<br><br>
        <b>Stay Details:</b><br>
        &nbsp;&nbsp;Arrival: {arrival}<br>
        &nbsp;&nbsp;Departure: {departure}<br>
        &nbsp;&nbsp;Number of Guests: {num_guests}<br>
        <br><b>Room Details:</b><br>
        &nbsp;&nbsp;Room: {room_type} #{room_number}<br><br>
        <b>Payment Details:</b><br>
        &nbsp;&nbsp;Total Paid: {total_paid}<br>
        &nbsp;&nbsp;Amount Due: {amount_due}<br>
        &nbsp;&nbsp;Payment Method: {payment_method}<br>
        &nbsp;&nbsp;Payment Status: {payment_status}<br>
        </div>
        <br><b style='color:#2980b9;'>Check-in has been successfully completed!</b>
        """
        self.confirmation_label.setText(message)
        
        # Print Receipt button
        if not hasattr(self, 'print_receipt_btn'):
            self.print_receipt_btn = QPushButton("Print Receipt")
            self.print_receipt_btn.clicked.connect(self.print_receipt)
            self.confirmation_label.parentWidget().layout().addWidget(self.print_receipt_btn)
        self.print_receipt_btn.setVisible(True)

    def prev_step(self):
        if self.wizard.currentIndex() > 0:
            self.wizard.setCurrentIndex(self.wizard.currentIndex() - 1)
            if self.wizard.currentIndex() == 2:  # Step 3: Room Selection
                self.load_room_grid()
            self.update_wizard_ui()

    def cancel_wizard(self):
        self.wizard.setCurrentIndex(0)
        self.update_wizard_ui()

    def finish_wizard(self):
        try:
            # Get the selected room ID
            if self.selected_room_id is None:
                QMessageBox.warning(self, "Error", "Please select a room")
                return
                
            # Get the guest data from the combo box
            guest_data = self.guest_select_combo.currentData()
            if not guest_data:
                QMessageBox.warning(self, "Error", "Please select a guest")
                return

            # Get guest ID from database or create a new guest if needed
            guest_id = get_guest_id_by_name(self.guest_first_name_label.text(), self.guest_last_name_label.text())
            if not guest_id and guest_data:
                guest_id = guest_data.get('id')
                
            # Create check-in record
            checkin_data = {
                'checkin_id': self.checkin_id,  # Use the UUID generated in __init__
                'transaction_id': self.transaction_id,  # Use the UUID generated in __init__
                'guest_id': guest_id,
                'room_id': self.selected_room_id,
                'arrival_date': self.arrival_date.selectedDate().toString('yyyy-MM-dd'),
                'departure_date': self.departure_date.selectedDate().toString('yyyy-MM-dd'),
                'num_guests': self.num_guests.value(),
                'payment_method': self.payment_method.currentText(),
                'total_paid': float(self.total_paid.text().replace('MAD ', '') or 0),
                'amount_due': float(self.amount_due.text().replace('MAD ', '') or 0),
                'payment_status': 'checked_in',
                'checkin_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }

            # Save check-in to database
            insert_checkin(checkin_data)
            
            # Generate receipt
            rooms = get_all_rooms()
            room_info = next((r for r in rooms if r['id'] == self.selected_room_id), {})
            room_type = room_info.get('type', '')
            room_number = room_info.get('number', '')
            guest_name = f"{self.guest_first_name_label.text()} {self.guest_last_name_label.text()}"
            self.generate_receipt(
                self.transaction_id,
                self.checkin_id,
                self.checkin_date,
                guest_name,
                self.arrival_date.selectedDate().toString('yyyy-MM-dd'),
                self.departure_date.selectedDate().toString('yyyy-MM-dd'),
                room_type,
                room_number,
                self.total_paid.text(),
                self.amount_due.text(),
                self.payment_method.currentText()
            )
            
            # Reset wizard to step 1 and clear fields for new check-in
            self.reset_wizard_fields()
            self.wizard.setCurrentIndex(0)
            self.update_wizard_ui()
            if hasattr(self, 'print_receipt_btn'):
                self.print_receipt_btn.setVisible(False)
            
            # Refresh both check-in and check-out lists
            self.load_checkin_list()
            self.load_checked_in_guests()  # This refreshes the check-out list

        except Exception as e:
            QMessageBox.warning(self, "Error", f"Failed to complete check-in: {str(e)}")

    def reset_wizard_fields(self):
        # Clear all fields in the wizard for a new check-in
        self.guest_search.clear()
        self.guest_select_combo.clear()
        self.guest_first_name_label.setText("")
        self.guest_last_name_label.setText("")
        self.guest_id_number_label.setText("")
        self.guest_nationality_label.setText("")
        self.arrival_date.setSelectedDate(QDate.currentDate())
        self.departure_date.setSelectedDate(QDate.currentDate().addDays(1))
        self.num_guests.setValue(1)
        self.selected_room_id = None
        self.load_room_grid()
        self.payment_method.setCurrentIndex(0)
        self.payment_amount.setText("0.00")
        self.total_paid.clear()
        self.amount_due.setText("0.00")
        self.payment_status_label.setText("Pending")
        self.payment_progress.setValue(0)
        self.confirmation_label.setText("")

    def generate_receipt(self, transaction_id, checkin_id, checkin_date, guest_name, arrival, departure, room_type, room_number, total_paid, amount_due, payment_method):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="Hotel Check-In Receipt", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Check-In Number: {checkin_id}", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Transaction ID: {transaction_id}", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Date: {checkin_date}", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Guest: {guest_name}", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Room: {room_type} #{room_number}", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Arrival: {arrival}  Departure: {departure}", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Total Paid: {total_paid}", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Amount Due: {amount_due}", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Payment Method: {payment_method}", ln=True, align="C")
        pdf.output("receipt.pdf")

    def print_receipt(self):
        # Open the generated PDF receipt
        os.startfile("receipt.pdf")

    def filter_guest_dropdown(self):
        """Filter the guest dropdown based on search text"""
        search_text = self.guest_search.text().lower()
        self.guest_select_combo.clear()
        
        # Add filtered guests to dropdown
        for guest in self.guests_data:
            full_name = f"{guest['first_name']} {guest['last_name']}"
            if search_text in full_name.lower():
                self.guest_select_combo.addItem(full_name, guest)

    def on_guest_selected(self, index):
        """Handle guest selection from dropdown"""
        if index >= 0:
            guest = self.guest_select_combo.currentData()
            if guest:
                self.guest_first_name_label.setText(guest.get('first_name', ''))
                self.guest_last_name_label.setText(guest.get('last_name', ''))
                self.guest_id_number_label.setText(guest.get('id_number', ''))
                self.guest_nationality_label.setText(guest.get('nationality', ''))
            else:
                self.guest_first_name_label.setText("")
                self.guest_last_name_label.setText("")
                self.guest_id_number_label.setText("")
                self.guest_nationality_label.setText("")

    def reload_guests_for_search(self):
        """Reload guests data and update dropdown"""
        self.guests_data = get_all_guests()
        self.filter_guest_dropdown()  # This will populate the dropdown with all guests initially

    def load_room_grid(self):
        # Remove old buttons
        for i in reversed(range(self.room_grid_layout.count())):
            widget = self.room_grid_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)
        rooms = get_all_rooms()
        cols = 5
        for idx, room in enumerate(rooms):
            btn = QPushButton(f"{room['number']}\n{room.get('type','')}\n{room.get('status','')}")
            btn.setCheckable(True)
            btn.setMinimumSize(100, 60)
            color = self._room_color(room.get('status',''))
            highlight = (self.selected_room_id == room['id'])
            style = f"background:{color};color:white;font-weight:bold;border-radius:8px;"
            if highlight:
                style += "border: 3px solid #f1c40f;"
                btn.setChecked(True)
            else:
                style += "border: none;"
                btn.setChecked(False)
            btn.setStyleSheet(style)
            if room.get('status') in ["Occupied", "Out of Order"]:
                btn.setEnabled(False)
            btn.clicked.connect(lambda _, rid=room['id']: self.select_room(rid))
            self.room_grid_layout.addWidget(btn, idx // cols, idx % cols)

    def _room_color(self, status):
        return {
            "Vacant": "#27ae60",
            "Occupied": "#c0392b",
            "Dirty": "#e67e22",
            "Clean": "#2980b9",
            "Out of Order": "#7f8c8d"
        }.get(status, "#bdc3c7")

    def select_room(self, room_id):
        self.selected_room_id = room_id
        self.load_room_grid()  # Refresh to update selection
        self.update_payment_amount()  # Update payment amount when room is selected

    def showEvent(self, event):
        super().showEvent(event)
        self.reload_guests_for_search()
        self.load_checkin_list()  # Load check-ins when widget is shown

    def update_amount_due(self):
        try:
            total = float(self.payment_amount.text())
            paid = float(self.total_paid.text() or 0)
            due = max(total - paid, 0)
            self.amount_due.setText(f"MAD {due:.2f}")
        except Exception:
            self.amount_due.setText(self.payment_amount.text())
        self.update_payment_status()

    def update_payment_status(self):
        try:
            total = float(self.payment_amount.text().replace('MAD ', ''))
            paid = float(self.total_paid.text() or 0)
            if self.total_paid.text().strip() == "":
                status = "Pending"
            elif paid == total:
                status = "Completed"
            elif 0 < paid < total:
                status = "Partially Paid"
            else:
                status = "Pending"
        except Exception:
            status = "Pending"
            total = 0
            paid = 0
        self.payment_status_label.setText(status)
        self.payment_progress.setValue(int(paid / total * 100) if total > 0 else 0)
        if status == "Completed":
            rooms = get_all_rooms()
            room_info = next((r for r in rooms if r['id'] == self.selected_room_id), {})
            room_type = room_info.get('type', '')
            room_number = room_info.get('number', '')
            guest_name = f"{self.guest_first_name_label.text()} {self.guest_last_name_label.text()}"
            self.generate_receipt(
                self.transaction_id,
                self.checkin_id,
                self.checkin_date,
                guest_name,
                self.arrival_date.selectedDate().toString('yyyy-MM-dd'),
                self.departure_date.selectedDate().toString('yyyy-MM-dd'),
                room_type,
                room_number,
                self.total_paid.text(),
                self.amount_due.text(),
                self.payment_method.currentText()
            )

    def update_payment_amount(self):
        """Calculate payment amount based on room type rate and number of nights"""
        if not self.selected_room_id:
            self.payment_amount.setText("0.00")
            return

        # Get room information
        rooms = get_all_rooms()
        room_info = next((r for r in rooms if r['id'] == self.selected_room_id), None)
        if not room_info or not room_info.get('type'):
            self.payment_amount.setText("0.00")
            return

        # Get room rate for the room type
        rates = get_room_rates()
        room_rate = next((r['night_rate'] for r in rates if r['room_type'] == room_info['type']), None)
        if not room_rate:
            self.payment_amount.setText("0.00")
            return

        # Calculate number of nights
        arrival = self.arrival_date.selectedDate()
        departure = self.departure_date.selectedDate()
        nights = arrival.daysTo(departure)
        if nights <= 0:
            self.payment_amount.setText("0.00")
            return

        # Calculate total amount
        total_amount = room_rate * nights
        self.payment_amount.setText(f"MAD {total_amount:.2f}")
        self.update_amount_due()

    def _legend_label(self, text, color):
        lbl = QLabel(text)
        lbl.setStyleSheet(f"background:{color};color:white;padding:4px 10px;border-radius:6px;")
        return lbl 

    def load_checkin_list(self):
        """Load and display check-ins in the list"""
        self.checkin_table.setRowCount(0)  # Clear existing rows
        checkins = get_all_checkins()
        
        for checkin in checkins:
            row = self.checkin_table.rowCount()
            self.checkin_table.insertRow(row)
            
            # Add data to columns
            self.checkin_table.setItem(row, 0, QTableWidgetItem(checkin['checkin_id']))
            self.checkin_table.setItem(row, 1, QTableWidgetItem(f"{checkin['first_name']} {checkin['last_name']}"))
            self.checkin_table.setItem(row, 2, QTableWidgetItem(checkin['arrival_date']))
            self.checkin_table.setItem(row, 3, QTableWidgetItem(checkin['departure_date']))
            self.checkin_table.setItem(row, 4, QTableWidgetItem(f"{checkin['room_type']} #{checkin['room_number']}"))
            self.checkin_table.setItem(row, 5, QTableWidgetItem(checkin['payment_status']))
            
            # Add action buttons
            actions_widget = QWidget()
            actions_layout = QHBoxLayout(actions_widget)
            actions_layout.setContentsMargins(0, 0, 0, 0)
            actions_layout.setSpacing(5)
            actions_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)  # Center the buttons
            
            view_btn = QPushButton("View")
            view_btn.setObjectName("tableActionButton")
            view_btn.setProperty("action", "view")
            view_btn.setFixedWidth(80)
            view_btn.clicked.connect(lambda _, c=checkin: self.view_checkin(c))
            
            extra_btn = QPushButton("Extra")
            extra_btn.setObjectName("tableActionButton")
            extra_btn.setProperty("action", "extra")
            extra_btn.setFixedWidth(80)
            extra_btn.clicked.connect(lambda _, c=checkin: self.add_extra_charge(c))
            
            actions_layout.addWidget(view_btn)
            actions_layout.addWidget(extra_btn)
            self.checkin_table.setCellWidget(row, 6, actions_widget)

    def view_checkin(self, checkin):
        """View details of a specific check-in"""
        # Get extra charges
        extra_charges = get_booking_services(checkin['id'])
        total_extra_charges = get_total_booking_charges(checkin['id'])
        
        # Format extra charges for display
        extra_charges_text = ""
        if extra_charges:
            extra_charges_text = "<br><b>Extra Charges:</b><br>"
            for charge in extra_charges:
                extra_charges_text += f"&nbsp;&nbsp;{charge['service_name']} ({charge['quantity']} {charge['unit']}): MAD {charge['total_charge']:.2f}<br>"
            extra_charges_text += f"<br><b>Total Extra Charges:</b> MAD {total_extra_charges:.2f}<br>"
        
        message = f"""
        <div style='font-size:15px;'>
        <b>Check-In Details</b><br><br>
        <b>Check-In Number:</b> {checkin['checkin_id']}<br>
        <b>Transaction ID:</b> {checkin['transaction_id']}<br>
        <b>Date of Check-In:</b> {checkin['checkin_date']}<br><br>
        <b>Guest:</b> {checkin['first_name']} {checkin['last_name']}<br>
        <b>Room:</b> {checkin['room_type']} #{checkin['room_number']}<br>
        <b>Arrival:</b> {checkin['arrival_date']}<br>
        <b>Departure:</b> {checkin['departure_date']}<br>
        <b>Number of Guests:</b> {checkin['num_guests']}<br><br>
        <b>Payment Details:</b><br>
        &nbsp;&nbsp;Total Paid: MAD {checkin['total_paid']:.2f}<br>
        &nbsp;&nbsp;Amount Due: MAD {checkin['amount_due']:.2f}<br>
        &nbsp;&nbsp;Payment Method: {checkin['payment_method']}<br>
        &nbsp;&nbsp;Payment Status: {checkin['payment_status']}<br>
        {extra_charges_text}
        </div>
        """
        QMessageBox.information(self, "Check-In Details", message)

    def add_extra_charge(self, checkin):
        """Open dialog to add extra charge for a check-in"""
        dialog = AddExtraChargeDialog(
            checkin['id'],
            f"{checkin['first_name']} {checkin['last_name']}",
            f"{checkin['room_type']} #{checkin['room_number']}",
            self
        )
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.load_checkin_list()  # Refresh the list to show updated charges 

    def refresh_guest_lists(self):
        """Refresh all guest dropdowns and lists"""
        # Refresh the guest dropdown in new check-in tab
        if hasattr(self, 'guest_dropdown'):
            self.reload_guests_for_search()
            # If there's search text, reapply the filter
            if hasattr(self, 'guest_search') and self.guest_search.text():
                self.filter_guest_dropdown() 